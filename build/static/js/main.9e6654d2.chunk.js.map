{"version":3,"sources":["logo.svg","features/Firebase/initFirebase.js","features/Session/Session.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","databaseURL","messagingSenderId","appId","measurementId","db","getDatabase","primary","useStyles","makeStyles","root","color","borderBottomColor","input","linkIcon","display","points","borderColor","pointsGroup","padding","divider","backgroundColor","width","maxWidth","marginTop","marginBottom","margin","users","new","background","join","Session","InputProps","classes","useState","name","setName","nameSubmitted","setNameSubmit","setPoint","show","setShow","setUsers","sessionId","setSessionId","initialState","setInitial","handlePointClick","point","session","updateDB","set","ref","getCalculations","mode","map","index","user","i","push","Number","className","count","printUsers","ButtonGroup","size","Button","onClick","event","to","variant","Math","floor","random","autoComplete","onSubmit","TextField","value","onChange","target","error","helperText","id","label","dbRef","get","child","then","snapshot","exists","console","log","val","catch","getSession","Divider","App","exact","path","component","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+KAAe,I,qFCcTA,EAAMC,YAXG,CACbC,OAAQ,0CACRC,WAAY,kCACZC,UAAW,kBACXC,cAAe,8BACfC,YAAa,uDACbC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKXC,EAAKC,YAAYX,G,eCLjBY,EAAU,UAKVC,EAAYC,YAAW,CAC3BC,KAAM,CACJ,sBAAuB,CACrBC,MAAOJ,GAET,8BAA+B,CAC7BK,kBAAmBL,GAErB,+BAAgC,CAC9BK,kBAAmBL,GAErB,UAAW,CACTI,MAAOJ,IAGXM,MAAO,CACLF,MAAOJ,GAETO,SAAU,CACRH,MAAOJ,EACPQ,QAAS,UAEXC,OAAQ,CACNL,MAAOJ,EACPU,YAAaV,GAEfW,YAAa,CACXC,QAAS,QAEXC,QAAS,CACPC,gBAAiBd,EACjBe,MAAO,OACPC,SAAU,IACVC,UAAW,GACXC,aAAc,GACdC,OAAQ,QAEVC,MAAO,CACLhB,MAAOJ,GAETqB,IAAK,CACHC,WAAYtB,EACZe,MAAO,MACPG,aAAc,IAEhBK,KAAM,CACJD,WAAYtB,EACZe,MAAO,KACPE,UAAW,MAwLAO,MApLR,SAAkBC,GACvB,IAAMC,EAAUzB,IAChB,EAAwB0B,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAuCF,oBAAS,GAAhD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAcK,GAAd,WACA,EAAwBL,oBAAS,GAAjC,mBAAOM,EAAP,KAAaC,EAAb,KACA,EAA0BP,mBAAS,IAAnC,mBAAOP,EAAP,KAAce,EAAd,KACA,EAAkCR,mBAAS,IAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KACA,EAAmCV,oBAAS,GAA5C,mBAAOW,EAAP,KAAqBC,EAArB,KAEA,SAASC,IAAwC,IAAtBZ,EAAqB,uDAAhBA,EAAMa,EAAU,uDAAJ,GAC1CN,EAAS,CAAC,CAACO,QAASN,EAAWhB,MAAO,CAAC,CACrCQ,KAAMA,EACNa,MAAOA,OAIX,SAASE,EAAUf,EAAMa,GACvBD,EAAiBZ,EAAM,IACvBgB,YAAIC,YAAI/C,EAAI,YAAcsC,GAAY,CACpChB,MAAO,CACLQ,KAAMA,EACNa,MAAO,MAoBb,SAASK,EAAiB1B,GACxB,IAAI2B,EAAO,GAeX,OAbgBrB,EAAQN,MACrBA,EAAM4B,KAAI,SAACN,EAASO,GAAV,OACT,8BACE,8BACGP,EAAQtB,MAAM4B,KAAI,SAACE,EAAMC,GAAP,OACjB,4BACGJ,EAAKK,KAAKC,OAAOH,EAAKT,SADjBU,SAHJF,MAYZ,qBAAKK,UAAW5B,EAAQnB,SAAxB,SACGwC,EAAKC,KAAI,SAACvC,GAAD,OACR,8BAAiBA,EAAOgC,MAAOhC,EAAO8C,QAA9B9C,QAMhB,SAAS+C,EAAYpC,EAAOa,GAC1B,OACE,gCACE,qBAAKqB,UAAW5B,EAAQN,MAAxB,SACGA,EAAM4B,KAAI,SAACN,EAASO,GAAV,OACT,8BACE,8BACGP,EAAQtB,MAAM4B,KAAI,SAACE,EAAMC,GAAP,OACjB,8BACGlB,GACC,gCACGiB,EAAKtB,KADR,IACesB,EAAKT,UAGpBR,GAAQiB,EAAKtB,OAASA,GACtB,gCACgB,KAAfsB,EAAKT,OACJ,gCACCS,EAAKtB,KADN,IACa,OAGC,KAAfsB,EAAKT,OACJ,gCACCS,EAAKtB,KADN,IACasB,EAAKT,aAKpBR,GAAQiB,EAAKtB,OAASA,GACtB,gCACGsB,EAAKtB,KADR,IACesB,EAAKT,WAtBhBU,SAHJF,QAkCbnB,GACC,sBAAKwB,UAAW5B,EAAQf,YAAxB,UACE,eAAC8C,EAAA,EAAD,CAAaC,KAAK,QAAQ,aAAW,8BAArC,UACE,cAACC,EAAA,EAAD,CAAQL,UAAW5B,EAAQjB,OAAQmD,QAAS,SAAAC,GAAK,OAAIrB,EAAiBZ,EAAM,KAA5E,eACA,cAAC+B,EAAA,EAAD,CAAQL,UAAW5B,EAAQjB,OAAQmD,QAAS,SAAAC,GAAK,OAAIrB,EAAiBZ,EAAM,IAA5E,eACA,cAAC+B,EAAA,EAAD,CAAQL,UAAW5B,EAAQjB,OAAQmD,QAAS,SAAAC,GAAK,OAAIrB,EAAiBZ,EAAM,IAA5E,eACA,cAAC+B,EAAA,EAAD,CAAQL,UAAW5B,EAAQjB,OAAQmD,QAAS,SAAAC,GAAK,OAAIrB,EAAiBZ,EAAM,IAA5E,eACA,cAAC+B,EAAA,EAAD,CAAQL,UAAW5B,EAAQjB,OAAQmD,QAAS,SAAAC,GAAK,OAAIrB,EAAiBZ,EAAM,IAA5E,eACA,cAAC+B,EAAA,EAAD,CAAQL,UAAW5B,EAAQjB,OAAQmD,QAAS,SAAAC,GAAK,OAAIrB,EAAiBZ,EAAM,IAA5E,eACA,cAAC+B,EAAA,EAAD,CAAQL,UAAW5B,EAAQjB,OAAQmD,QAAS,SAAAC,GAAK,OAAIrB,EAAiBZ,EAAM,KAA5E,gBACA,cAAC+B,EAAA,EAAD,CAAQL,UAAW5B,EAAQjB,OAAQmD,QAAS,SAAAC,GAAK,OAAIrB,EAAiBZ,EAAM,KAA5E,gBACA,cAAC+B,EAAA,EAAD,CAAQL,UAAW5B,EAAQjB,OAAQmD,QAAS,SAAAC,GAAK,OAAIrB,EAAiBZ,EAAM,MAA5E,gBACEK,GACA,cAAC0B,EAAA,EAAD,CAAQL,UAAW5B,EAAQjB,OAAQmD,QAAS,SAAAC,GAAK,OAAI3B,GAAQ,IAA7D,6BAGHD,GACCa,EAAgB1B,SAQ1B,OACE,gCACE,cAAC,IAAD,CAAM0C,GAAG,uCAAuCF,QAAS,SAAAC,GAAK,MAAI,CAACtB,GAAW,GAAOF,EAAa,IAAKR,EAAQ,IAAKG,EAAS,IAAKD,GAAc,GAAQG,GAAQ,KAAhK,SACE,mDAEDI,GACC,gCACE,cAACqB,EAAA,EAAD,CAAQI,QAAQ,YAAYT,UAAW5B,EAAQL,IAAKuC,QAAS,SAAAC,GAAK,MAAI,CAACtB,GAAW,GAAQF,EAAa2B,KAAKC,MAAsB,IAAhBD,KAAKE,UAAoB,KAA3I,yBACA,sBAAMZ,UAAW5B,EAAQvB,KAAMgE,aAAa,MAAMC,SAAU,SAAAP,GAC1DtB,GAAW,IADb,SAGE,cAAC8B,EAAA,EAAD,CAAW5C,WAAY,CAAC6B,UAAW5B,EAAQpB,OAAQgE,MAAOlC,EAC1DmC,SAAU,SAAAV,GAAK,MAAI,CAACxB,EAAawB,EAAMW,OAAOF,SAC9CG,MAAqB,OAAdrC,EACPsC,WAA0B,OAAdtC,EAAqB,8BAAgC,IACjEuC,GAAG,iBAAiBC,MAAM,iBAE5B,cAACjB,EAAA,EAAD,CAAQI,QAAQ,YAAYT,UAAW5B,EAAQH,KAAMqC,QAAS,SAAAC,GAAK,OAzH7E,SAAqBzB,GACnB,IAAMyC,EAAQhC,YAAI9C,eAClB+E,YAAIC,YAAMF,EAAO,YAAazC,IAAY4C,MAAK,SAACC,GAC1CA,EAASC,UACX3C,GAAW,GACX4C,QAAQC,IAAIH,EAASI,SAErBF,QAAQC,IAAI,qBACZ/C,EAAa,UAEdiD,OAAM,SAACb,GACRU,QAAQV,MAAMA,MA8G+Dc,CAAWnD,IAAlF,+BAGFE,GACA,gCACE,qBAAIgB,UAAW5B,EAAQnB,SAAvB,uBAA4C6B,KAC5C,cAAC,IAAD,CAAUkB,UAAW5B,EAAQnB,YAC3BuB,GACA,sBAAMwB,UAAW5B,EAAQvB,KAAMgE,aAAa,MAAMC,SAAU,SAACP,GAAD,MAAW,CACrErB,EAAiBZ,EAAK,IACtBG,GAAc,GACdY,EAASf,KAHX,SAIE,cAACyC,EAAA,EAAD,CAAW5C,WAAY,CAAC6B,UAAW5B,EAAQpB,OAAQgE,MAAO1C,EAAM2C,SAAU,SAAAV,GAAK,OAAIhC,EAAQgC,EAAMW,OAAOF,QAAQK,GAAG,iBAAiBC,MAAM,WAG7I9C,GACC,gCACE,cAAC0D,EAAA,EAAD,CAASlC,UAAW5B,EAAQb,UAC3BoB,GACCuB,EAAWpC,GAAO,IAElBa,GACAuB,EAAWpC,GAAO,a,QC9NrBqE,G,MAVH,WACV,OACE,cAAC,IAAD,UACE,qBAAKnC,UAAU,MAAf,SACE,cAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,uCAAuCC,UAAWpE,U,iCCTrE,SAASqE,IAAwB,IAAbC,EAAY,uDAAH,EAClC,OAAO,IAAIC,SAAQ,SAACC,GAAD,OACjBC,YAAW,kBAAMD,EAAQ,CAAEE,KAAMJ,MAAW,QCAhD,IAUaK,EAAiBC,YAC5B,qBAD4C,uCAE5C,WAAON,GAAP,eAAAO,EAAA,sEACyBR,EAAWC,GADpC,cACQQ,EADR,yBAGSA,EAASJ,MAHlB,2CAF4C,uDASjCK,EAAeC,YAAY,CACtC5E,KAAM,UACNU,aArBmB,CACnBgC,MAAO,EACPmC,OAAQ,QAqBRC,SAAU,CACRC,UAAW,SAACC,GAKVA,EAAMtC,OAAS,GAEjBuC,UAAW,SAACD,GACVA,EAAMtC,OAAS,GAGjBwC,kBAAmB,SAACF,EAAOG,GACzBH,EAAMtC,OAASyC,EAAOC,UAK1BC,cAAe,SAACC,GACdA,EACGC,QAAQhB,EAAeiB,SAAS,SAACR,GAChCA,EAAMH,OAAS,aAEhBU,QAAQhB,EAAekB,WAAW,SAACT,EAAOG,GACzCH,EAAMH,OAAS,OACfG,EAAMtC,OAASyC,EAAOC,cAKvB,EAAoDT,EAAae,QAgBzDf,GAhBR,EAAQI,UAAR,EAAmBE,UAAnB,EAA8BC,kBAgBtBP,EAAf,SCrEagB,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAASC,K,QCOOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUZ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJa,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxD,MAAK,SAACyD,GAClCA,EAAaC,iB","file":"static/js/main.9e6654d2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.b2e5a01e.svg\";","import { initializeApp } from \"firebase/app\";\nimport { getDatabase, ref, set } from \"firebase/database\";\n\nconst config = {\n  apiKey: \"AIzaSyDYYVBK8gldJD66uDYvBiKi0FDgQ4QLSTU\",\n  authDomain: \"problem-pointer.firebaseapp.com\",\n  projectId: \"problem-pointer\",\n  storageBucket: \"problem-pointer.appspot.com\",\n  databaseURL: \"https://problem-pointer-default-rtdb.firebaseio.com/\",\n  messagingSenderId: \"554807281859\",\n  appId: \"1:554807281859:web:e595fa78dcae2141a33a76\",\n  measurementId: \"G-DRHHQ36833\"\n};\n\nconst app = initializeApp(config);\n\nconst db = getDatabase(app);\n\nexport { initializeApp, db, app };\n","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinkIcon from '@material-ui/icons/Link';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Divider from '@material-ui/core/Divider';\nimport { initializeApp, db, app } from \"../Firebase/initFirebase.js\";\nimport { Link, BrowserRouter as Router, Route } from 'react-router-dom';\nimport { getDatabase, ref, set, child, get } from \"firebase/database\";\n\nconst primary = '#6fee86';\nvar total = 0;\nvar mean = 0;\n//var usersDBTest = [{session: 1234, users: [{name: 'Tina', point: 3}, {name: 'Lauren', point: 3}, {name: 'Liam', point: 2}, {name: 'Sandra', point: 1}]}]\n\nconst useStyles = makeStyles({\n  root: {\n    '& label.Mui-focused': {\n      color: primary,\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: primary,\n    },\n    '& .MuiInput-underline:before': {\n      borderBottomColor: primary,\n    },\n    '& label': {\n      color: primary,\n    },\n  },\n  input: {\n    color: primary,\n  },\n  linkIcon: {\n    color: primary,\n    display: 'inline',\n  },\n  points: {\n    color: primary,\n    borderColor: primary,\n  },\n  pointsGroup: {\n    padding: '20px',\n  },\n  divider: {\n    backgroundColor: primary,\n    width: '100%',\n    maxWidth: 500,\n    marginTop: 25,\n    marginBottom: 25,\n    margin: 'auto',\n  },\n  users: {\n    color: primary,\n  },\n  new: {\n    background: primary,\n    width: '18%',\n    marginBottom: 25,\n  },\n  join: {\n    background: primary,\n    width: '9%',\n    marginTop: 20,\n  },\n});\n\nexport function Session (InputProps) {\n  const classes = useStyles();\n  const [name, setName] = useState('')\n  const [nameSubmitted, setNameSubmit] = useState(false)\n  const [point, setPoint] = useState('')\n  const [show, setShow] = useState(false)\n  const [users, setUsers] = useState([])\n  const [sessionId, setSessionId] = useState('')\n  const [initialState, setInitial] = useState(true)\n\n  function handlePointClick (name=name, point='') {\n    setUsers([{session: sessionId, users: [{\n      name: name,\n      point: point\n    }]}])\n  }\n\n  function updateDB (name, point) {\n    handlePointClick(name, '')\n    set(ref(db, 'sessions/' + sessionId), {\n      users: {\n        name: name,\n        point: ''\n      }\n    });\n  }\n\n  function getSession (sessionId) {\n    const dbRef = ref(getDatabase());\n    get(child(dbRef, 'sessions/' +sessionId)).then((snapshot) => {\n      if (snapshot.exists()) {\n        setInitial(false)\n        console.log(snapshot.val());\n      } else {\n        console.log(\"No data available\");\n        setSessionId(null)\n      }\n    }).catch((error) => {\n      console.error(error);\n    });\n  }\n\n  function getCalculations (users) {\n    var mode = [];\n    var total = 0;\n    <div className={classes.users}>\n      {users.map((session, index) => (\n        <div key={index}>\n          <div>\n            {session.users.map((user, i) => (\n              <p key={i}>\n                {mode.push(Number(user.point))}\n              </p>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n    return (\n      <div className={classes.linkIcon}>\n        {mode.map((points) =>\n          <p key={points}>{points.point}{points.count}</p>)\n        }\n      </div>\n    )\n  }\n\n  function printUsers (users, show) {\n    return (\n      <div>\n        <div className={classes.users}>\n          {users.map((session, index) => (\n            <div key={index}>\n              <div>\n                {session.users.map((user, i) => (\n                  <p key={i}>\n                    {show &&\n                      <div>\n                        {user.name} {user.point}\n                      </div>\n                    }\n                    {!show && user.name !== name &&\n                      <div>\n                      {user.point !== '' &&\n                        <div>\n                        {user.name} {\"*\"}\n                        </div>\n                      }\n                      {user.point === '' &&\n                        <div>\n                        {user.name} {user.point}\n                        </div>\n                      }\n                      </div>\n                    }\n                    {!show && user.name === name &&\n                      <div>\n                        {user.name} {user.point}\n                      </div>\n                    }\n                  </p>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n        {nameSubmitted &&\n          <div className={classes.pointsGroup}>\n            <ButtonGroup size=\"large\" aria-label=\"large outlined button group\">\n              <Button className={classes.points} onClick={event => handlePointClick(name, 0.5)}>0</Button>\n              <Button className={classes.points} onClick={event => handlePointClick(name, 1)}>1</Button>\n              <Button className={classes.points} onClick={event => handlePointClick(name, 2)}>2</Button>\n              <Button className={classes.points} onClick={event => handlePointClick(name, 3)}>3</Button>\n              <Button className={classes.points} onClick={event => handlePointClick(name, 5)}>5</Button>\n              <Button className={classes.points} onClick={event => handlePointClick(name, 8)}>8</Button>\n              <Button className={classes.points} onClick={event => handlePointClick(name, 13)}>13</Button>\n              <Button className={classes.points} onClick={event => handlePointClick(name, 20)}>20</Button>\n              <Button className={classes.points} onClick={event => handlePointClick(name, '?')}>?</Button>\n              {!show &&\n                <Button className={classes.points} onClick={event => setShow(true)}>Show Results</Button>\n              }\n            </ButtonGroup>\n            {show &&\n              getCalculations(users)\n            }\n          </div>\n        }\n      </div>\n    )\n  }\n\n    return (\n      <div>\n        <Link to=\"/lauren-malik/lauren-malik.github.io\" onClick={event => [setInitial(true), setSessionId(''), setName(''), setPoint(''), setNameSubmit(false), setShow(false)]}>\n          <h1>Problem Pointer</h1>\n        </Link>\n        {initialState &&\n          <div>\n            <Button variant=\"contained\" className={classes.new} onClick={event => [setInitial(false), setSessionId(Math.floor(Math.random() * 10000) + 1)]}>New Session</Button>\n            <form className={classes.root} autoComplete=\"off\" onSubmit={event => {\n              setInitial(false);\n            }}>\n              <TextField InputProps={{className: classes.input}} value={sessionId}\n              onChange={event => [setSessionId(event.target.value)]}\n              error={sessionId === null}\n              helperText={sessionId === null ? \"This session doesn't exist.\" : ' '}\n              id=\"standard-basic\" label=\"Session ID\"/>\n            </form>\n            <Button variant=\"contained\" className={classes.join} onClick={event => getSession(sessionId)}>Join Existing</Button>\n          </div>\n        }\n        {!initialState &&\n          <div>\n            <h3 className={classes.linkIcon}>Session - {sessionId}</h3>\n            <LinkIcon className={classes.linkIcon}/>\n            {!nameSubmitted &&\n              <form className={classes.root} autoComplete=\"off\" onSubmit={(event) => [\n                handlePointClick(name,''),\n                setNameSubmit(true),\n                updateDB(name,'')]}>\n                <TextField InputProps={{className: classes.input}} value={name} onChange={event => setName(event.target.value)} id=\"standard-basic\" label=\"Name\"/>\n              </form>\n            }\n            {nameSubmitted &&\n              <div>\n                <Divider className={classes.divider}/>\n                {show &&\n                  printUsers(users, true)\n                }\n                {!show &&\n                  printUsers(users, false)\n                }\n              </div>\n            }\n          </div>\n        }\n      </div>\n    );\n}\n\nexport default Session;\n","import React from 'react';\nimport logo from './logo.svg';\nimport Session from './features/Session/Session';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom'\nimport './App.css';\n\nconst App = () => {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Route exact path=\"/lauren-malik/lauren-malik.github.io\" component={Session}></Route>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}